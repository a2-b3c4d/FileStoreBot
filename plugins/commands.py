import os
import asyncio
import logging
import logging.config

# Get logging configurations
logging.getLogger().setLevel(logging.ERROR)
logging.getLogger("pyrogram").setLevel(logging.WARNING)

import base64
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.errors import ListenerCanceled
from database.database import *
from config import *

BATCH = []

app = Client("my_bot")

@app.on_message(filters.command('start'))
async def start(client, message: Message):
    await message.reply_text(
        "Oi! You want access to my stash? Not so fast! üîí\n"
        "First, you gotta join our channel‚Äîno freebies here!\n"
        "Do that, and maybe I‚Äôll let you in on the treasure. ‚öì"
    )

@app.on_message(filters.command('delete'))
async def delete_file(client, message: Message):
    # Assuming the file deletion logic is here
    await message.reply_text(
        "‚úÖ Y·¥è·¥ú Ä “ì…™ ü·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!"
    )


@app.on_message(filters.command('start') & filters.incoming & filters.private)
async def start(c, m, cb=False):
    if not cb:
        send_msg = await m.reply_text("**P Ä·¥è Ñ·¥áss…™…¥…¢...**", quote=True)

    owner = await c.get_users(int(OWNER_ID))
    owner_username = owner.username if owner.username else 'AvishkarPatil'

    # start text
    text = f"""**H·¥á è!** {m.from_user.mention(style='md')}
    
ü§ó **I'm FileStoreBot **

‚Ä£ Y·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥õ·¥è Ä·¥á  è·¥è·¥ú Ä T·¥á ü·¥á…¢ Ä·¥Ä·¥ç M·¥á·¥Ö…™·¥Ä “ì·¥è Ä ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ L…™…¥·¥ã! ·¥Ä…¥·¥Ö S ú·¥Ä Ä·¥á A…¥ è·¥° ú·¥á Ä·¥á

‚Ä£ C ü…™·¥Ñ·¥ã ·¥è…¥ H·¥á ü·¥ò ·¥Ä…¥·¥Ö K…¥·¥è·¥° M·¥è Ä·¥á A ô·¥è·¥ú·¥õ Us…™…¥…¢ ·¥ç·¥á

__üö∏ P·¥è Ä…¥ C·¥è…¥·¥õ·¥á…¥·¥õ N·¥è·¥õ A ü ü·¥è·¥°·¥á·¥Ö O…¥ T ú·¥á B·¥è·¥õ__

**üíû M·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö B è:** {owner.mention(style='md')}
"""

    # Buttons
    buttons = [[
            InlineKeyboardButton('H·¥á ü·¥ò üí°', callback_data="help"),
            InlineKeyboardButton('A ô·¥è·¥ú·¥õ üëë', callback_data="about")],[
            InlineKeyboardButton('M è F·¥Ä·¥õ ú·¥á Ä üë®‚Äç‚úàÔ∏è', url=f"https://t.me/{owner_username}"),
        ]]

    # when button home is pressed
    if cb:
        return await m.message.edit(
                   text=text,
                   reply_markup=InlineKeyboardMarkup(buttons)
               )

    if len(m.command) > 1:  # sending the stored file
        try:
            m.command[1] = await decode(m.command[1])
        except:
            pass

        if 'batch_' in m.command[1]:
            await send_msg.delete()
            cmd, chat_id, message = m.command[1].split('_')
            string = await c.get_messages(int(chat_id), int(message)) if not DB_CHANNEL_ID else await c.get_messages(int(DB_CHANNEL_ID), int(message))

            if string.empty:
                owner = await c.get_users(int(OWNER_ID))
                return await m.reply_text(f"ü•¥ S·¥è Ä Ä è  ô Ä·¥è  è·¥è·¥ú Ä “ì…™ ü·¥á ·¥°·¥Äs ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö  ô è “ì…™ ü·¥á ·¥è·¥°…¥·¥á Ä ·¥è Ä  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä\n\nF·¥è Ä ·¥ç·¥è Ä·¥á  ú·¥á ü·¥ò ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è ·¥è·¥°…¥·¥á Äüëâ {owner.mention(style='md')}")
            message_ids = (await decode(string.text)).split('-')
            for msg_id in message_ids:
                msg = await c.get_messages(int(chat_id), int(msg_id)) if not DB_CHANNEL_ID else await c.get_messages(int(DB_CHANNEL_ID), int(msg_id))

                if msg.empty:
                    owner = await c.get_users(int(OWNER_ID))
                    return await m.reply_text(f"ü•¥ S·¥è Ä Ä è  ô Ä·¥è  è·¥è·¥ú Ä “ì…™ ü·¥á ·¥°·¥Äs ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö  ô è “ì…™ ü·¥á ·¥è·¥°…¥·¥á Ä ·¥è Ä  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä\n\nF·¥è Ä ·¥ç·¥è Ä·¥á  ú·¥á ü·¥ò ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è ·¥è·¥°…¥·¥á Äüëâ {owner.mention(style='md')}")

                await msg.copy(m.from_user.id)
                await asyncio.sleep(1)
            return

        chat_id, msg_id = m.command[1].split('_')
        msg = await c.get_messages(int(chat_id), int(msg_id)) if not DB_CHANNEL_ID else await c.get_messages(int(DB_CHANNEL_ID), int(msg_id))

        if msg.empty:
            return await send_msg.edit(f"ü•¥ S·¥è Ä Ä è  ô Ä·¥è  è·¥è·¥ú Ä “ì…™ ü·¥á ·¥°·¥Äs ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö  ô è “ì…™ ü·¥á ·¥è·¥°…¥·¥á Ä ·¥è Ä  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä\n\nF·¥è Ä ·¥ç·¥è Ä·¥á  ú·¥á ü·¥ò ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è ·¥è·¥°…¥·¥á Ä üëâ {owner.mention(style='md')}")
        
        caption = f"{msg.caption.markdown}\n\n\n" if msg.caption else ""
        as_uploadername = (await get_data(str(chat_id))).up_name
        
        if as_uploadername:
            if chat_id.startswith('-100'):
                channel = await c.get_chat(int(chat_id))
                caption += "\n\n\n**--U·¥ò ü·¥è·¥Ä·¥Ö·¥á Ä D·¥á·¥õ·¥Ä…™ üs:--**\n\n"
                caption += f"**üì¢ C ú·¥Ä…¥…¥·¥á ü N·¥Ä·¥ç·¥á:** __{channel.title}__\n\n"
                caption += f"**üó£ Us·¥á Ä N·¥Ä·¥ç·¥á:** @{channel.username}\n\n" if channel.username else ""
                caption += f"**üë§ C ú·¥Ä…¥…¥·¥á ü I·¥Ö:** __{channel.id}__\n\n"
            else:
                user = await c.get_users(int(chat_id)) 
                caption += "\n\n\n**--U·¥ò ü·¥è·¥Ä·¥Ö·¥á Ä D·¥á·¥õ·¥Ä…™ üs:--**\n\n"
                caption += f"**üçÅ N·¥Ä·¥ç·¥á:** [{user.from_user.first_name}](tg://user?id={user.from_user.id})\n\n"
                caption += f"**üñã Us·¥á Ä N·¥Ä·¥ç·¥á:** @{user.username}\n\n" if user.username else ""


        await send_msg.delete()
        await msg.copy(m.from_user.id, caption=caption)


    else:  # sending start message
        await send_msg.edit(
            text=text,
            reply_markup=InlineKeyboardMarkup(buttons)
        )


@app.on_message(filters.command('me') & filters.incoming & filters.private)
async def me(c, m):
    """ T ú…™s ·¥°…™ ü ü ·¥õ
